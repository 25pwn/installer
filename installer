#!/bin/bash
set -ex
log() # LEVEL TEXT
{
	local log_level="${1}"
	local log_text="${2}"

	local log_text_color
	case "${log_level}" in
		"debug")
			if [ ${installer_verbosity} -ge 2 ]; then
				log_text_color="GREEN"
			else
				return
			fi
			;;
		"info")
			if [ ${installer_verbosity} -ge 1 ]; then
				log_text_color="LGREEN"
			else
				return
			fi
			;;
		"warning")
			log_text_color="LYELLOW"
			;;
		"error")
			log_text_color="LRED"
			;;
		*)
			log "warning" "Invalid log level ${log_level}"
	esac
	unset log_level

	case ${log_text_color} in
		"DEFAULT")
			COLORCODE='\e[0m'
			;;
		"RED")
			COLORCODE='\e[31m'
			;;
		"GREEN")
			COLORCODE='\e[32m'
			;;
		"YELLOW")
			COLORCODE='\e[33m'
			;;
		"BLUE")
			COLORCODE='\e[34m'
			;;
		"LRED")
			COLORCODE='\e[91m'
			;;
		"LGREEN")
			COLORCODE='\e[92m'
			;;
		"LYELLOW")
			COLORCODE='\e[93m'
			;;
		"LBLUE")
			COLORCODE='\e[94m'
			;;
	esac
	unset log_text_color

	printf "${COLORCODE}%s\e[0m\n" "${log_text}"
}

prefixoutput() # OUTPUT
{
	sed "s/^/${1} /"
}

# source:
# https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itsel/246128#246128
get_script_prefix()
{
	SOURCE=${BASH_SOURCE[0]}
	while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	
	printf "%s" "$DIR"
}

autopart_set_vars()
{
	log "debug" "Retrieving child nodes"
	local autopart_dev_list=( $(lsblk ${autopart_dev} -o NAME -ln) )
	efi_dev="/dev/${autopart_dev_list[2]}"
	root_dev="/dev/${autopart_dev_list[3]}"
	unset autopart_dev_list

	if [ ${use_disk_encryption} -eq 1 ]; then
		crypt_dev=${root_dev}
		root_dev="/dev/mapper/${crypt_name}"
		mounts_devices[0]="${root_dev}"
	fi

	grub_efi=1
	grub_bios_dev="${autopart_dev}"

	mounts_points=()
	mounts_devices=()
	mounts_types=()
	mounts_opts=()

	mounts_points+=("/")
	mounts_devices+=("${root_dev}")
	mounts_types+=("btrfs")
	mounts_opts+=("subvol=$btrfssubvol,compress=zstd:0")

	mounts_points+=("/boot/efi")
	mounts_devices+=("${efi_dev}")
	mounts_types+=("vfat")
	mounts_opts+=("defaults")
}

run_autopart()
{
	log "info" "Running autopart"
	
	if [ ${crypt_erase} -eq 1 ]; then
		log "info" "Wiping device"
		pv --progress --timer --eta --rate --bytes --stop-at-size -s "$(blockdev --getsize64 "${autopart_dev}")" "${crypt_erase_source}" > "${autopart_dev}"
	fi

	log "debug" "Partitioning device"
	sgdisk -Z "${autopart_dev}"
	sgdisk -o "${autopart_dev}"
	sgdisk \
		--new=1:0:+1MiB --typecode=1:ef02 --change-name=1:MBR\
		--new=2:0:+128MiB   --typecode=2:EF00 --change-name=2:EFI \
		--new=3:0:0       --typecode=3:8300 --change-name=3:ROOT \
		"${autopart_dev}"

	log "debug" "Running partprobe"
	partprobe "${autopart_dev}"

	log "debug" "Retrieving child nodes"
	local autopart_dev_list=( $(lsblk ${autopart_dev} -o NAME -ln) )
	efi_dev="/dev/${autopart_dev_list[2]}"
	root_dev="/dev/${autopart_dev_list[3]}"
	unset autopart_dev_list

	log "debug" "Creating EFI system partition"
	mkfs.vfat -F 32 "${efi_dev}"

	if [ ${use_disk_encryption} -eq 1 ]; then
		log "debug" "Creating LUKS partition"
		crypt_dev=${root_dev}
		root_dev="/dev/mapper/${crypt_name}"
		mounts_devices[0]="${root_dev}"
		printf '%s' "${crypt_passphrase}" | cryptsetup luksFormat --type "${crypt_type}" --pbkdf pbkdf2 "${crypt_dev}" --key-file -
		printf '%s' "${crypt_passphrase}" | cryptsetup open "${crypt_dev}" "${crypt_name}" --key-file -
		opened_cryptodisks+=("${crypt_name}")
	fi

	log "debug" "Creating BTRFS filesystem"
	mkfs.btrfs -f "${root_dev}"

	log "debug" "Creating BTRFS subvolume"
	local temp_mountdir="/tmp/installer_mnt"
	created_mountpoints+=("${temp_mountdir}")
	mkdir -p "${temp_mountdir}"
	mount "${root_dev}" "${temp_mountdir}" -o compress=zstd:0
	mounted_mountpoints+=("${root_dev}")
	mkdir -p "$(dirname "${temp_mountdir}/${btrfssubvol}")"
	btrfs subvol create "${temp_mountdir}/${btrfssubvol}"
	umount "${root_dev}"
	unset mounted_mountpoints[-1]

	rm -d "${temp_mountdir}"
	unset temp_mountdir
	unset created_mountpoints[-1]

	log "debug" "Closing LUKS partition"
	cryptsetup close "${crypt_name}"
	unset opened_cryptodisks[-1]

	grub_efi=1
	grub_bios_dev="${autopart_dev}"

	mounts_points=()
	mounts_devices=()
	mounts_types=()
	mounts_opts=()

	mounts_points+=("/")
	mounts_devices+=("${root_dev}")
	mounts_types+=("btrfs")
	mounts_opts+=("subvol=$btrfssubvol,compress=zstd:0")

	mounts_points+=("/mnt/root")
	mounts_devices+=("${root_dev}")
	mounts_types+=("btrfs")
	mounts_opts+=("subvol=,compress=zstd:0")

	mounts_points+=("/boot/efi")
	mounts_devices+=("${efi_dev}")
	mounts_types+=("vfat")
	mounts_opts+=("defaults")
}

setup_mounts()
{
	log "debug" "Setting up mounts"
	installer_root_mount="/var/lib/machines/${machinename}"
	created_mountpoints+=("${installer_root_mount}")
	local randomid="$(printf '%05d' $RANDOM)" # used to create mountpoints to avoid collisions

	if [ ${use_disk_encryption} -eq 1 ]; then
		log "debug" "Opening ${root_dev}"
		printf '%s' "${crypt_passphrase}" | cryptsetup open "${crypt_dev}" "${crypt_name}" --key-file -
		opened_cryptodisks+=("${crypt_name}")
	fi

	for current_mounts_index in ${!mounts_points[@]}; do
		local current_mounts_point="${mounts_points[${current_mounts_index}]}"
		local current_mounts_device="${mounts_devices[${current_mounts_index}]}"
		local current_mounts_type="${mounts_types[${current_mounts_index}]}"
		local current_mounts_opt="${mounts_opts[${current_mounts_index}]}"
		
		mkdir -p "${installer_root_mount}/${current_mounts_point}"
		(mount "${current_mounts_device}" "$installer_root_mount/${current_mounts_point}" \
			-t "${current_mounts_type}" -o "${current_mounts_opt}" \
				&& log "debug" "Mounted ${current_mounts_device} to ${current_mounts_point}") \
					|| (log "error" "Failed to mount ${current_mounts_device} to ${current_mounts_point}" && exit 1)
		unset current_mounts_index
		mounted_mountpoints+=("${current_mounts_point}")
	done
}

cleanup_mounts()
{
	if [ ! -d "${installer_root_mount}" ]; then
		return
	fi
	log "debug" "Cleaning up mounts"

	log "info" "Unmounting all mounted devices"
	for ((current_mount_index=${#mounted_mountpoints[@]} - 1; current_mount_index >= 0; current_mount_index--)); do
		local current_mountpoint="${mounted_mountpoints[${current_mount_index}]}"
		log "debug" "Unmounting ${current_mountpoint}"
		umount "${installer_root_mount:?}/${current_mountpoint}" && unset mounted_mountpoints[${current_mount_index}]
		unset current_mountpoint
	done
	
	log "debug" "Removing all mountpoints"
	for current_mountpoint_index in ${!created_mountpoints[@]}; do
		local current_mountpoint="${created_mountpoints[${current_mountpoint_index}]}"
		log "debug" "Removing ${current_mountpoint}"
		rm -d "${current_mountpoint}" && unset created_mountpoints[${current_mountpoint_index}]
		unset current_mountpoint_index
	done	

	if [ ${use_disk_encryption} -eq 1 ]; then
		log "info" "Closing all opened cryptodisks"
		for current_crypt_index in ${!opened_cryptodisks[@]}; do
			local current_crypt_name="${opened_cryptodisks[${current_crypt_index}]}"
			log "debug" "Closing ${current_crypt_name}"
			cryptsetup close "${current_crypt_name}" && unset opened_cryptodisks[${current_crypt_index}]
			unset current_crypt_index
		done
	fi
}

bootstrap_system()
{
	log "debug" "Bootstrapping system"
	
	log "debug" "Running pacstrap"
	pacstrap -cGM "${installer_root_mount}" base \
		|| (log "error" "Failed to bootstrap system" && exit 1)

	log "debug" "Running systemd-firstboot"
	systemd-firstboot \
		--root "${installer_root_mount}" \
		--locale "en_US.UTF-8" \
		--hostname "${machinename}" \
		--force \
			|| (log "error" "Failed to initially configure system" && exit 1)
}

start_container()
{
	log "debug" "Configuring container"

	mkdir -p "/etc/systemd/system/systemd-nspawn@${machinename}.service.d"
	cp "${configdir}/nspawn/override.conf" \
		"/etc/systemd/system/systemd-nspawn@${machinename}.service.d/overrride.conf"

	mkdir -p "/etc/systemd/nspawn"
	cp "${configdir}/nspawn/machinename.nspawn" \
		"/etc/systemd/nspawn/${machinename}.nspawn"

	log "debug" "Starting Container"
	machinectl start "${machinename}" && log "debug" "Started container"

	started_containers+=("${machinename}")
}
poweroff_container()
{
	local container_status="$(systemctl show "systemd-nspawn@${machinename}" -P StatusText)"
	if [ "${container_status}" != "Container running: Ready." ]; then
		return
	fi
	unset container_status

	log "debug" "Shutting down container"
	machinectl poweroff "${machinename}"
	
	log "debug" "Cleaning up container configurations"
	rm -rf "/etc/systemd/system/systemd-nspawn@${machinename}.service.d"
	rm -f "/etc/systemd/nspawn/${machinename}.nspawn"

	# TODO
	# started_containers-=("${machinename}")
}

run_commands() # HYPERVISOR USER < COMMANDS
{
	local hypervisor="${1}"
	local user="${2}"
	
	local prefix_commands
	if [ ${installer_verbosity} -ge 3 ]; then
		prefix_commands='set -xe'
	else
		prefix_commands='set -e'
	fi
	case $1 in
		"arch-chroot")
			if [ "${user}" != "root" ]; then
				userarg="-u ${user}"
			fi

			arch-chroot \
				${userarg} "${installer_root_mount}" \
				bash <<- ENDOFSCRIPT
				${prefix_commands}
				$(cat /dev/stdin)
				ENDOFSCRIPT
			;;
		"systemd-nspawn")
			if [ "${user}" != "root" ]; then
				userflag="--user"
			fi

			systemd-run \
				${userflag} -PM "${user}"@"${machinename}" \
				bash <<- ENDOFSCRIPT
				${prefix_commands}
				$(cat /dev/stdin)
				ENDOFSCRIPT
			;;
	esac
	unset prefix_commands
}

run_script() # HYPERVISOR USER SCRIPT
{
	local hypervisor="${1}"
	local user="${2}"
	local script="${3}"

	run_commands "${hypervisor}" "${user}" <<- ENDOFSCRIPT > "/dev/null"
		$(cat "${configdir}/scripts/${script}/script")
		ENDOFSCRIPT
}

run_new_scripts()
{	
	log "debug" "Running container_scripts scripts"
	for current_script in ${container_scripts}; do
		log "debug" "Running $current_script script"
		local scriptdir="${configdir}/scripts/${current_script}"
		if [ -r  "${scriptdir}/newscript" ]; then
			source "${scriptdir}/newscript" \
				|| (log "error" "Failed to run ${current_script}" && exit 1)
		else
			run_script "systemd-nspawn" "root" "${current_script}" \
				|| (log "error" "Failed to run ${current_script}" && exit 1)
		fi
		unset scriptdir
		unset current_script
	done
	
	log "debug" "Running user_container_scripts scripts"
	for current_script in ${user_container_scripts}; do
		log "debug" "Running $current_script script"
		local scriptdir="${configdir}/scripts/${current_script}"
		if [ -r  "${scriptdir}/newscript" ]; then
			source "${scriptdir}/newscript" \
				|| (log "error" "Failed to run ${current_script}" && exit 1)
		else
			run_script "systemd-nspawn" "${username}" "${current_script}" \
				|| (log "error" "Failed to run ${current_script}" && exit 1)
		fi
		unset scriptdir
		unset current_script
	done
	
	log "debug" "Running arch_chroot_scripts scripts"
	for current_script in ${arch_chroot_scripts}; do
		log "debug" "Running $current_script script"
		local scriptdir="${configdir}/scripts/${current_script}"
		if [ -r  "${scriptdir}/newscript" ]; then
			source "${scriptdir}/newscript" \
				|| (log "error" "Failed to run ${current_script}" && exit 1)
		else
			run_script "arch-chroot" "root" "${current_script}" \
				|| (log "error" "Failed to run ${current_script}" && exit 1)
		fi
		unset scriptdir
		unset current_script
	done

	log "debug" "Showing disk usage"
	run_commands "systemd-nspawn" "root" <<- ENDOFSCRIPT > "/dev/null"
		btrfs fi usage /
		ENDOFSCRIPT
}

install()
{
	log "info" "Starting install"

	if [ ${autopart} -eq 1 ]; then
		run_autopart
	fi

	setup_mounts

	bootstrap_system

	start_container
	run_new_scripts
	poweroff_container

	if [ ${installer_verbosity} -ge 2 ]; then
		log "debug" "Showing install size"
		log "debug" "$(du -hs "${installer_root_mount}")"
	fi
	
	cleanup_mounts

	log "info" "Finished install"
}

uninstall()
{
	log "info" "Starting uninstall"

	if [ ${autopart} -eq 1 ]; then
		autopart_set_vars
	fi
	setup_mounts

	for ((i=${#mounts_points[@]} - 1; i >= 0; i--)); do
		log "debug" "Clearing ${mounts_points[${i}]}"
		rm -rf "${installer_root_mount:?}/${mounts_points[${i}]}"
		log "debug" "Unmounting ${mounts_points[${i}]}"
		umount "${installer_root_mount:?}/${mounts_points[${i}]}"
		unset i
	done

	rm -d "${installer_root_mount}"

	cleanup_mounts

	log "info" "Finished uninstall"
}

reinstall()
{
	log "info" "Starting reinstall"

	uninstall
	install
	
	log "info" "Finished reinstall"
}

nshell()
{
	if [ ${autopart} -eq 1 ]; then
		autopart_set_vars
	fi
	setup_mounts
	start_container

	log "info" "Entering container"
	! machinectl shell "root"@"${machinename}" 
	log "info" "Exited container"
	
	poweroff_container
	cleanup_mounts
}

cshell()
{
	if [ ${autopart} -eq 1 ]; then
		autopart_set_vars
	fi
	setup_mounts
	
	log "info" "Entering chroot"
	! arch-chroot "${installer_root_mount}" bash
	log "info" "Exited chroot"
	
	cleanup_mounts
}

cleanup_script()
{
	log "debug" "Running script cleanup"

	for current_container_index in ${!started_containers[@]}; do
		local current_container="${started_containers[${current_container_index}]}"
		poweroff_container "${current_container}" && unset started_containers[${current_container_index}]
		unset current_container
		unset current_container_index
	done
	
	cleanup_mounts

	trap - EXIT
	trap - SIGINT

	if [ ${installer_verbosity} -ge 4 ]; then
		log "debug" "Printing local variables"
		local
		log "debug" "Printing all variables"
		set
	fi

	log "debug" "Exiting"
	exit
}

exit_hook()
{
	log "error" "Running exit hook"
	cleanup_script
}

sigint_hook()
{
	log "error" "Running sigint hook"
	exit_hook
}

setup_script()
{
	trap "exit_hook" EXIT
	trap "sigint_hook" SIGINT
}

parse_args() # ACTION CONFIG
{
	installer_arguments_action="${1}"
	installer_arguments_config="${2}"


	case "${installer_arguments_action}" in
		install | uninstall | reinstall | nshell | cshell )
			# log "debug" "Valid action ${installer_arguments_action}"
			;;
		*)
			(log "error" "Invalid action ${installer_arguments_action}" && exit 1)
			;;
	esac


	if [ "${installer_arguments_config}" = "" ]; then
		(log "error" "No config specified" && exit 1)
	elif [ ! -e "${installer_arguments_config}" ]; then
		(log "error" "Config ${installer_arguments_config} does not exist" && exit 1)
	elif [ ! -e "${installer_arguments_config}" ]; then
		(log "error" "Config file ${installer_arguments_config}/config does not exist" && exit 1)
	fi
}

parse_config() # CONFIG
{
	local config_path="${1}"

	local scriptprefix="$(get_script_prefix)"

	local defaultconfigfile="${scriptprefix}/configs/defaults/config"
	source "${defaultconfigfile}"

	local configfile="${config_path}/config"
	source "${configfile}"

	local unset_vars=0
	for var in configdir distro machinename; do
    	if [ "${var}" = "" ]; then
        	log "warning" "${var} is unset"
        	unset_vars=1
    	fi
	done

	if [ ${unset_vars} -ne 0 ]; then
    	(log "error" "Insufficient configuration" && exit 1)
	fi

	if [ ${installer_verbosity} -ge 3 ]; then
		set -x
	fi
}

entry() # ACTION CONFIG
{
	if [ ${EUID} -ne 0 ]; then
		(log "error" "Run as root" && exit 1)
	fi
	
	installer_verbosity=1
	parse_args "$@"
	parse_config "${installer_arguments_config}"

	if [ ${installer_is_sourced} -eq 0 ]; then
		setup_script
		"$installer_arguments_action"
		cleanup_script
	else
		setup_script
	fi
}

# sources:
# https://stackoverflow.com/a/28776166/18379499
# https://unix.stackexchange.com/a/220840/517083
if [ "$(return 0 2>/dev/null; printf "%s" "$?")" ]; then
	installer_is_sourced=0
	entry "$@"
else
	installer_is_sourced=1
fi